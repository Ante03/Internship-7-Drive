// <auto-generated />
using System;
using Internship_7_Drive.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Internship_7_Drive.Data.Migrations
{
    [DbContext(typeof(DriveDbContext))]
    [Migration("20241231141032_InitialMIgration")]
    partial class InitialMIgration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Internship_7_Drive.Data.Entities.Models.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Komentar 1",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8587), new TimeSpan(0, 1, 0, 0, 0)),
                            FileId = 1,
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Komentar 2",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8591), new TimeSpan(0, 1, 0, 0, 0)),
                            FileId = 2,
                            OwnerId = 2
                        });
                });

            modelBuilder.Entity("Internship_7_Drive.Data.Entities.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FolderId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Sadržaj datoteke 1",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8552), new TimeSpan(0, 1, 0, 0, 0)),
                            FolderId = 1,
                            LastChangedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8555), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "file1.txt",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Sadržaj datoteke 2",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8558), new TimeSpan(0, 1, 0, 0, 0)),
                            FolderId = 2,
                            LastChangedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8560), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "file2.txt",
                            OwnerId = 2
                        });
                });

            modelBuilder.Entity("Internship_7_Drive.Data.Entities.Models.FileShared", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("SharedWithUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SharedWithUserId");

                    b.ToTable("FileShareds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileId = 1,
                            OwnerId = 1,
                            SharedWithUserId = 3
                        },
                        new
                        {
                            Id = 2,
                            FileId = 2,
                            OwnerId = 2,
                            SharedWithUserId = 4
                        });
                });

            modelBuilder.Entity("Internship_7_Drive.Data.Entities.Models.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentFolderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8418), new TimeSpan(0, 1, 0, 0, 0)),
                            LastChangedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8487), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Dokumenti",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8492), new TimeSpan(0, 1, 0, 0, 0)),
                            LastChangedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8494), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Slike",
                            OwnerId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8496), new TimeSpan(0, 1, 0, 0, 0)),
                            LastChangedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8497), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Projekti",
                            OwnerId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8499), new TimeSpan(0, 1, 0, 0, 0)),
                            LastChangedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8501), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Muzika",
                            OwnerId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8503), new TimeSpan(0, 1, 0, 0, 0)),
                            LastChangedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8504), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Video",
                            OwnerId = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8507), new TimeSpan(0, 1, 0, 0, 0)),
                            LastChangedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8508), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Arhiva",
                            OwnerId = 6
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8510), new TimeSpan(0, 1, 0, 0, 0)),
                            LastChangedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8512), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Backup",
                            OwnerId = 7
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8514), new TimeSpan(0, 1, 0, 0, 0)),
                            LastChangedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8515), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Bilješke",
                            OwnerId = 8
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8517), new TimeSpan(0, 1, 0, 0, 0)),
                            LastChangedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8519), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Reference",
                            OwnerId = 9
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8521), new TimeSpan(0, 1, 0, 0, 0)),
                            LastChangedAt = new DateTimeOffset(new DateTime(2024, 12, 31, 15, 10, 31, 634, DateTimeKind.Unspecified).AddTicks(8522), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Osobno",
                            OwnerId = 10
                        });
                });

            modelBuilder.Entity("Internship_7_Drive.Data.Entities.Models.FolderShared", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("ParentFolderId")
                        .HasColumnType("integer");

                    b.Property<int>("SharedWithUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentFolderId");

                    b.HasIndex("SharedWithUserId");

                    b.ToTable("FolderShared");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OwnerId = 1,
                            ParentFolderId = 1,
                            SharedWithUserId = 3
                        },
                        new
                        {
                            Id = 2,
                            OwnerId = 2,
                            ParentFolderId = 2,
                            SharedWithUserId = 4
                        });
                });

            modelBuilder.Entity("Internship_7_Drive.Data.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ante.antic@gmail.com",
                            FirstName = "Ante",
                            LastName = "Antić",
                            Password = "lozinka1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "marko.maric@gmail.com",
                            FirstName = "Marko",
                            LastName = "Marić",
                            Password = "lozinka2"
                        },
                        new
                        {
                            Id = 3,
                            Email = "ivan.ivic@gmail.com",
                            FirstName = "Ivan",
                            LastName = "Ivić",
                            Password = "lozinka3"
                        },
                        new
                        {
                            Id = 4,
                            Email = "stipe.stipic@gmail.com",
                            FirstName = "Stipe",
                            LastName = "Stipić",
                            Password = "lozinka4"
                        },
                        new
                        {
                            Id = 5,
                            Email = "luka.lukic@gmail.com",
                            FirstName = "Luka",
                            LastName = "Lukić",
                            Password = "lozinka5"
                        },
                        new
                        {
                            Id = 6,
                            Email = "karlo.karlic@gmail.com",
                            FirstName = "Karlo",
                            LastName = "Karlić",
                            Password = "lozinka6"
                        },
                        new
                        {
                            Id = 7,
                            Email = "josip.josic@gmail.com",
                            FirstName = "Josip",
                            LastName = "Josić",
                            Password = "lozinka7"
                        },
                        new
                        {
                            Id = 8,
                            Email = "mate.matic@gmail.com",
                            FirstName = "Mate",
                            LastName = "Matić",
                            Password = "lozinka8"
                        },
                        new
                        {
                            Id = 9,
                            Email = "nikola.nikolic@gmail.com",
                            FirstName = "Nikola",
                            LastName = "Nikolić",
                            Password = "lozinka9"
                        },
                        new
                        {
                            Id = 10,
                            Email = "toni.tonic@gmail.com",
                            FirstName = "Toni",
                            LastName = "Tonić",
                            Password = "lozinka10"
                        });
                });

            modelBuilder.Entity("Internship_7_Drive.Data.Entities.Models.Comments", b =>
                {
                    b.HasOne("Internship_7_Drive.Data.Entities.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Internship_7_Drive.Data.Entities.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Internship_7_Drive.Data.Entities.Models.File", b =>
                {
                    b.HasOne("Internship_7_Drive.Data.Entities.Models.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Internship_7_Drive.Data.Entities.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Internship_7_Drive.Data.Entities.Models.FileShared", b =>
                {
                    b.HasOne("Internship_7_Drive.Data.Entities.Models.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Internship_7_Drive.Data.Entities.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Internship_7_Drive.Data.Entities.Models.User", "ShardWithUser")
                        .WithMany()
                        .HasForeignKey("SharedWithUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Owner");

                    b.Navigation("ShardWithUser");
                });

            modelBuilder.Entity("Internship_7_Drive.Data.Entities.Models.Folder", b =>
                {
                    b.HasOne("Internship_7_Drive.Data.Entities.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Internship_7_Drive.Data.Entities.Models.Folder", "ParentFolder")
                        .WithMany("Subfolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("Internship_7_Drive.Data.Entities.Models.FolderShared", b =>
                {
                    b.HasOne("Internship_7_Drive.Data.Entities.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Internship_7_Drive.Data.Entities.Models.Folder", "ParentFolder")
                        .WithMany()
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Internship_7_Drive.Data.Entities.Models.User", "ShardWithUser")
                        .WithMany()
                        .HasForeignKey("SharedWithUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("ParentFolder");

                    b.Navigation("ShardWithUser");
                });

            modelBuilder.Entity("Internship_7_Drive.Data.Entities.Models.Folder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Subfolders");
                });
#pragma warning restore 612, 618
        }
    }
}
